import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchUpcommingAppointments,
  fetchPastAppointments,
} from "./appointmentAPI";

const initialState = {
  upcommingAppointments: [],
  pastAppointments: [],
  upcommingAppointmentsCount: 0,
  pastAppointmentsCount: 0,
  status: "idle",
  error: null,
};

export const fetchUpcommingAppointmentsAsync = createAsyncThunk(
  "Appointment/fetchUpcommingAppointments",
  async () => {
    const response = await fetchUpcommingAppointments();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const fetchPastAppointmentsAsync = createAsyncThunk(
  "Appointment/fetchPastAppointments",
  async () => {
    const response = await fetchPastAppointments();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

const getAppointmentsCount = (appointmentArray) => {
  let count = 0;
  appointmentArray.forEach((data) => (count += data.treatments.length));
  return count;
};
export const appointmentSlice = createSlice({
  name: "Appointment",
  initialState,
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUpcommingAppointmentsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchUpcommingAppointmentsAsync.fulfilled, (state, action) => {
        state.status = "success";
        state.upcommingAppointments = action.payload;
        state.upcommingAppointmentsCount = getAppointmentsCount(action.payload);
      })
      .addCase(fetchUpcommingAppointmentsAsync.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload;
      });

    builder
      .addCase(fetchPastAppointmentsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchPastAppointmentsAsync.fulfilled, (state, action) => {
        state.status = "success";
        state.pastAppointments = action.payload;
        state.pastAppointmentsCount = getAppointmentsCount(action.payload);
      })
      .addCase(fetchPastAppointmentsAsync.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload;
      });
  },
});

//export const {} = appointmentSlice.actions;

export default appointmentSlice.reducer;
