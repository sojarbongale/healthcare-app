import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchPatientDetails } from "./patientAPI";

const initialState = {
  patientDetails: null,
  status: "idle",
  error: null
};

export const fetchPatientDetailsAsync = createAsyncThunk(
  "patient/fetchPatientDetails",
  async () => {
    const response = await fetchPatientDetails();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const patientSlice = createSlice({
  name: "patient",
  initialState,
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPatientDetailsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchPatientDetailsAsync.fulfilled, (state, action) => {
        state.status = "success";
        state.patientDetails = action.payload;
      })
      .addCase(fetchPatientDetailsAsync.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload;
      });
  },
});

//export const {} = patientSlice.actions;

export default patientSlice.reducer;
